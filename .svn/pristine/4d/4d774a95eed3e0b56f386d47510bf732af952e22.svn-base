<html>

<head>
   <meta charset="UTF-8">
   <base href="../">
   <meta http-equiv="content-type" content="text/html;charset=utf-8;" />
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <link rel="stylesheet" href="styles/plugins/elementui.css">
   <link rel="stylesheet" href="components/css-loader.css">
   <link rel="stylesheet" href="styles/plugins/font-awesome.css">
   <link rel="stylesheet" href="styles/style.css">

   <title>组件开发环境</title>
   <style>
   </style>
</head>

<body>
   <div id="app">
      <el-row>
         <el-col :span="16">
            <el-card class="box-card" style="margin-top: 10px;">
               <div slot="header" class="clearfix title">
                  <span>
                     <b>热力图显示</b>：组件测试条件（包括props、内部条件等）</span>
               </div>
               <div>
                  <table border="1" style="width: 100%;">
                     <tr>
                        <td>参数</td>
                        <td>方向</td>
                        <td>说明</td>
                        <td>类型</td>
                        <td>可选值</td>
                        <td>默认值</td>
                     </tr>
                     <tr>
                        <td>radius</td>
                        <td>输入</td>
                        <td>热力点半径</td>
                        <td>number</td>
                        <td>
                           <input type="text" v-model="radius" placeholder="请输入热力点半径">
                        </td>
                        <td>45</td>
                     </tr>
                     <tr>
                        <td>data</td>
                        <td>输入</td>
                        <td>热力数据列表（坐标和值）</td>
                        <td>array[{x,y,value}]</td>
                        <td>

                        </td>
                        <td></td>
                     </tr>
                     <tr>
                        <td>gradient</td>
                        <td>输入</td>
                        <td>色阶变化、根据色阶显示</td>
                        <td>object {"0.1":"red","0.5":"yellow"}</td>
                        <td>
                           <input type="text" v-model="gradient" placeholder="请输入色阶变化对象">
                        </td>
                        <td></td>
                     </tr>
                  </table>
               </div>
            </el-card>
            <el-card class="box-card" style="margin-top: 10px;">
               <div slot="header" class="clearfix">
                  <span>组件显示</span>
               </div>
               <div style="width: 600px; height: 400px;">
                  <vx-basic-demo :radius="radius" :data="data" :gradient="Gradient">
                  </vx-basic-demo>
               </div>
            </el-card>
            <el-card class="box-card" style="margin-top: 10px;">
               <div slot="header" class="clearfix title">
                  <span>组件数据变量（包括输出结果、内部数据等）</span>
               </div>
               <div>
                  <!-- 输出的结果与内部数据 -->
                  无
               </div>
            </el-card>
         </el-col>
         <el-col :span="8">
            <el-card class="box-card" style="margin-left: 10px;">
               <div slot="header" class="clearfix">
                  <span>自动化测试脚本</span>
                  <el-button style="float: right; padding: 3px 0" type="text">开始测试</el-button>
               </div>
               <textarea style="border-radius: 5px; width: 100%; height: 80%;"></textarea>
            </el-card>
         </el-col>
      </el-row>
   </div>
</body>
<!-- 先引入 Vue -->
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
<script type="text/javascript" src="scripts/plugins/vuex.js"></script>
<!-- 引入组件库 -->
<script type="text/javascript" src="scripts/plugins/elementui.min.js"></script>

<!-- 常用控件库 -->
<script type="text/javascript" src="scripts/plugins/jquery-2.0.3.min.js"></script>
<script type="text/javascript" src="scripts/plugins/moment/moment.min.js"></script>
<script type="text/javascript" src="scripts/plugins/moment/moment.zh-cn.js"></script>
<script type="text/javascript" src="scripts/plugins/layer/layer.js"></script>
<script type="text/javascript" src="scripts/plugins/heatmap-2.0.2.min.js"></script>

<!-- 自定义JS库 -->
<script type="text/javascript" src="scripts/common/jquery.ajax.js"></script>
<script type="text/javascript" src="scripts/common/jquery.form.js"></script>


<script type="text/javascript" src="scripts/common/components-init.js"></script>
<script>
   vueOptions = {
      data() {
         return {
            Search: "测试条件",
            PageTitle: "组件开发环境",
            radius: 45,
            data: [],
            gradient: null
         }
      },
      created() {
         this.loadData();
      },
      computed: {
         Gradient: {
            get()  {
               if(!this.gradient)
                  return null;
               return JSON.parse(this.gradient);
            }
         }
      },
      methods: {
         loadData: function () {
            let me = this;
            let query = {
               DataFields: ["Zone_NumberServed", "Zone_SecondsOccupied"],
               Locations: {
                  MallIds: ["be0991c8818d438ba737cb1fb8002883"]
               },
               ZoneTypeId: "b111a8c427ae4387a43c3bd299cd4e6f",
               GroupBy: {
                  Period: "All",
                  Domain: "Zone"
               }
            };
            // $.ajaxPost(
            //    "transfer/url.html?op=transfer",
            //    { ServiceInfo: { Name: "ReportFlowService", op: "report" }, Query: query },
            //    function(res) {
            //       if (res.status == 1000) {
            //          me.showHeatmap(res.data);
            //       }
            //    }
            // );
            let dataList = [];
            let xWidth = 600;
            let yHeight = 500;
            for (let x = 0; x < 10; x++) {
               for (let y = 0; y < 10; y++) {
                  let item = {
                     x: x * xWidth / 10 + xWidth / 20,
                     y: y * yHeight / 10 + yHeight / 20,
                     value: me.GetRandomNum(100, 2000)
                  };
                  dataList.push(item);
               }
            }
            let posXList = [-xWidth / 45, xWidth / 45, -xWidth / 45, xWidth / 45];
            let posYList = [-yHeight / 45, -yHeight / 45, yHeight / 45, yHeight / 45];
            let valueList = [];
            dataList.forEach(element => {
               let dataItems = me.randAlloc(
                  element.value,
                  Math.floor(element.value * 0.1),
                  Math.floor(element.value * 0.5),
                  4
               );

               for (let i = 0; i < 4; i++) {
                  let item = {
                     x: Math.round(element.x + posXList[i]),
                     y: Math.round(element.y + posYList[i]),
                     value: dataItems[i]
                  };
                  valueList.push(item);
               }
            });
            this.data = valueList;
         },
         GetRandomNum: function (Min, Max) {
            var Range = Max - Min;
            var Rand = Math.random();
            return Min + Math.round(Rand * Range);
         },
         randAlloc: function (total, min, max, length) {
            // 首先要判断是否符合 min 和 max 条件
            if (min * length > total || max * length < total) {
               throw Error(`没法满足最最少 ${min} 最大 ${max} 的条件`);
            }

            const result = [];
            let restValue = total;
            let restLength = length;
            for (let i = 0; i < length - 1; i++) {
               restLength--;
               // 这一次要发的数量必须保证剩下的要足最小量
               // 同进要保证剩下的不能大于需要的最大量
               const restMin = restLength * min;
               const restMax = restLength * max;
               // 可发的量
               const usable = restValue - restMin;
               // 最少要发的量
               const minValue = Math.max(min, restValue - restMax);
               // 以 minValue 为最左，max 为中线来进行随机，即随机范围是 (max - minValue) * 2
               // 如果这个范围大于 usable - minValue，取 usable - minValue
               const limit = Math.min(usable - minValue, (max - minValue) * 2);
               // 随机部分加上最少要发的部分就是应该发的，但是如果大于 max，最大取到 max
               result[i] = Math.min(max, minValue + Math.floor(limit * Math.random()));
               restValue -= result[i];
            }
            result[length - 1] = restValue;

            return result;
         }
      }
   }
</script>
<style>
   table {
      /* width: 100%; */
      border-collapse: separate;
      border-spacing: 2;
   }
</style>
